"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4829],{18210:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var o=t(87462),r=(t(67294),t(3905));const a={},s="Performance Test",l={unversionedId:"examples/core/flow/PerformanceTest",id:"examples/core/flow/PerformanceTest",title:"Performance Test",description:"",source:"@site/docs/examples/core/flow/PerformanceTest.mdx",sourceDirName:"examples/core/flow",slug:"/examples/core/flow/PerformanceTest",permalink:"/behave-graph-struct/docs/examples/core/flow/PerformanceTest",draft:!1,editUrl:"https://github.com/aitorllj93/behave-graph-struct/tree/main/website/docs/examples/core/flow/PerformanceTest.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Gate",permalink:"/behave-graph-struct/docs/examples/core/flow/Gate"},next:{title:"Sequence",permalink:"/behave-graph-struct/docs/examples/core/flow/Sequence"}},c={},d=[],i={toc:d};function p(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,o.Z)({},i,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"performance-test"},"Performance Test"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "nodes": [\n    {\n      "type": "lifecycle/onStart",\n      "id": "0",\n      "flows": {\n        "flow": {\n          "nodeId": "1",\n          "socket": "flow"\n        }\n      }\n    },\n    {\n      "type": "debug/log",\n      "id": "1",\n      "parameters": {\n        "text": {\n          "value": "Starting 10,000,000 iteration for-loop..."\n        }\n      },\n      "flows": {\n        "flow": {\n          "nodeId": "2",\n          "socket": "flow"\n        }\n      }\n    },\n    {\n      "type": "flow/forLoop",\n      "id": "2",\n      "parameters": {\n        "startIndex": {\n          "value": 0\n        },\n        "endIndex": {\n          "value": 10000000\n        }\n      },\n      "flows": {\n        "loopBody": {\n          "nodeId": "5",\n          "socket": "flow"\n        },\n        "completed": {\n          "nodeId": "7",\n          "socket": "flow"\n        }\n      }\n    },\n    {\n      "type": "math/modulus/integer",\n      "id": "3",\n      "parameters": {\n        "a": {\n          "link": {\n            "nodeId": "2",\n            "socket": "index"\n          }\n        },\n        "b": {\n          "value": 1000000\n        }\n      }\n    },\n    {\n      "type": "math/equal/integer",\n      "id": "4",\n      "parameters": {\n        "a": {\n          "link": {\n            "nodeId": "3",\n            "socket": "result"\n          }\n        },\n        "b": {\n          "value": 0\n        }\n      }\n    },\n    {\n      "type": "flow/branch",\n      "id": "5",\n      "parameters": {\n        "condition": {\n          "link": {\n            "nodeId": "4",\n            "socket": "result"\n          }\n        }\n      },\n      "flows": {\n        "true": {\n          "nodeId": "6",\n          "socket": "flow"\n        }\n      }\n    },\n    {\n      "type": "debug/log",\n      "id": "6",\n      "parameters": {\n        "text": {\n          "value": "1,000,000 more iterations..."\n        }\n      }\n    },\n    {\n      "type": "debug/log",\n      "id": "7",\n      "parameters": {\n        "text": {\n          "value": "Completed all iterations!"\n        }\n      }\n    }\n  ]\n}\n\n')))}p.isMDXComponent=!0}}]);