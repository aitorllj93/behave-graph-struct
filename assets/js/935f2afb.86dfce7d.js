"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docsSidebar":[{"type":"link","label":"Getting Started","href":"/behave-graph-struct/docs/getting-started","docId":"getting-started"},{"type":"category","label":"Profiles","collapsible":true,"collapsed":false,"items":[{"type":"category","label":"Struct","collapsible":true,"collapsed":false,"items":[{"type":"category","label":"Values","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"list","href":"/behave-graph-struct/docs/profiles/Struct/Values/list","docId":"profiles/Struct/Values/list"},{"type":"link","label":"object","href":"/behave-graph-struct/docs/profiles/Struct/Values/object","docId":"profiles/Struct/Values/object"}],"href":"/behave-graph-struct/docs/category/values"},{"type":"category","label":"Nodes","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"Logic","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"AssocPath","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"logic/assocPath/object","href":"/behave-graph-struct/docs/profiles/Struct/Nodes/logic/assoc-path/object","docId":"profiles/Struct/Nodes/logic/assoc-path/object"}],"href":"/behave-graph-struct/docs/category/assocpath"},{"type":"category","label":"concat","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"List","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"logic/concat/list/2","href":"/behave-graph-struct/docs/profiles/Struct/Nodes/logic/concat/list/2","docId":"profiles/Struct/Nodes/logic/concat/list/2"},{"type":"link","label":"logic/concat/list/3","href":"/behave-graph-struct/docs/profiles/Struct/Nodes/logic/concat/list/3","docId":"profiles/Struct/Nodes/logic/concat/list/3"}],"href":"/behave-graph-struct/docs/category/list"}]},{"type":"category","label":"Equal","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"logic/equal/list","href":"/behave-graph-struct/docs/profiles/Struct/Nodes/logic/equal/list","docId":"profiles/Struct/Nodes/logic/equal/list"},{"type":"link","label":"logic/equal/object","href":"/behave-graph-struct/docs/profiles/Struct/Nodes/logic/equal/object","docId":"profiles/Struct/Nodes/logic/equal/object"}],"href":"/behave-graph-struct/docs/category/equal"},{"type":"link","label":"logic/list","href":"/behave-graph-struct/docs/profiles/Struct/Nodes/logic/list","docId":"profiles/Struct/Nodes/logic/list"},{"type":"category","label":"MergeDeep","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"logic/mergeDeep/object","href":"/behave-graph-struct/docs/profiles/Struct/Nodes/logic/merge-deep/object","docId":"profiles/Struct/Nodes/logic/merge-deep/object"}],"href":"/behave-graph-struct/docs/category/mergedeep"},{"type":"link","label":"logic/object","href":"/behave-graph-struct/docs/profiles/Struct/Nodes/logic/object","docId":"profiles/Struct/Nodes/logic/object"},{"type":"category","label":"Path","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"logic/path/integer","href":"/behave-graph-struct/docs/profiles/Struct/Nodes/logic/path/integer","docId":"profiles/Struct/Nodes/logic/path/integer"},{"type":"link","label":"logic/path/object","href":"/behave-graph-struct/docs/profiles/Struct/Nodes/logic/path/object","docId":"profiles/Struct/Nodes/logic/path/object"},{"type":"link","label":"logic/path/string","href":"/behave-graph-struct/docs/profiles/Struct/Nodes/logic/path/string","docId":"profiles/Struct/Nodes/logic/path/string"}],"href":"/behave-graph-struct/docs/category/path"},{"type":"category","label":"Validate","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"logic/validate/object","href":"/behave-graph-struct/docs/profiles/Struct/Nodes/logic/validate/object","docId":"profiles/Struct/Nodes/logic/validate/object"}],"href":"/behave-graph-struct/docs/category/validate"}],"href":"/behave-graph-struct/docs/category/logic"},{"type":"category","label":"math","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"ToList","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"math/toList/string","href":"/behave-graph-struct/docs/profiles/Struct/Nodes/math/to-list/string","docId":"profiles/Struct/Nodes/math/to-list/string"}],"href":"/behave-graph-struct/docs/category/tolist"},{"type":"category","label":"ToObject","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"math/toObject/string","href":"/behave-graph-struct/docs/profiles/Struct/Nodes/math/to-object/string","docId":"profiles/Struct/Nodes/math/to-object/string"}],"href":"/behave-graph-struct/docs/category/toobject"},{"type":"category","label":"ToString","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"math/toString/list","href":"/behave-graph-struct/docs/profiles/Struct/Nodes/math/to-string/list","docId":"profiles/Struct/Nodes/math/to-string/list"},{"type":"link","label":"math/toString/object","href":"/behave-graph-struct/docs/profiles/Struct/Nodes/math/to-string/object","docId":"profiles/Struct/Nodes/math/to-string/object"}],"href":"/behave-graph-struct/docs/category/tostring"}]}],"href":"/behave-graph-struct/docs/category/nodes"}],"href":"/behave-graph-struct/docs/category/struct"}],"href":"/behave-graph-struct/docs/category/profiles"}]},"docs":{"getting-started":{"id":"getting-started","title":"Getting Started","description":"Installation","sidebar":"docsSidebar"},"profiles/Struct/Nodes/logic/assoc-path/object":{"id":"profiles/Struct/Nodes/logic/assoc-path/object","title":"logic/assocPath/object","description":"It makes a shallow clone of obj with setting or overriding with newValue the property found with path. See Rambdax\'s assocPath","sidebar":"docsSidebar"},"profiles/Struct/Nodes/logic/concat/list/2":{"id":"profiles/Struct/Nodes/logic/concat/list/2","title":"logic/concat/list/2","description":"Returns the result of concatenating the given lists or strings. See Rambdax\'s concat","sidebar":"docsSidebar"},"profiles/Struct/Nodes/logic/concat/list/3":{"id":"profiles/Struct/Nodes/logic/concat/list/3","title":"logic/concat/list/3","description":"Returns the result of concatenating the given lists or strings. See Rambdax\'s concat","sidebar":"docsSidebar"},"profiles/Struct/Nodes/logic/equal/list":{"id":"profiles/Struct/Nodes/logic/equal/list","title":"logic/equal/list","description":"Returns true if its arguments are equivalent, false otherwise. Handles cyclical data structures. Dispatches symmetrically to the equals methods of both arguments, if present. See Rambdax\'s equals","sidebar":"docsSidebar"},"profiles/Struct/Nodes/logic/equal/object":{"id":"profiles/Struct/Nodes/logic/equal/object","title":"logic/equal/object","description":"Returns true if its arguments are equivalent, false otherwise. Handles cyclical data structures. Dispatches symmetrically to the equals methods of both arguments, if present. See Rambdax\'s equals","sidebar":"docsSidebar"},"profiles/Struct/Nodes/logic/list":{"id":"profiles/Struct/Nodes/logic/list","title":"logic/list","description":"Returns the list passed as input","sidebar":"docsSidebar"},"profiles/Struct/Nodes/logic/merge-deep/object":{"id":"profiles/Struct/Nodes/logic/merge-deep/object","title":"logic/mergeDeep/object","description":"Creates a new object with the own properties of the first object merged with the own properties of the second object. If a key exists in both objects:","sidebar":"docsSidebar"},"profiles/Struct/Nodes/logic/object":{"id":"profiles/Struct/Nodes/logic/object","title":"logic/object","description":"Returns the object passed as input","sidebar":"docsSidebar"},"profiles/Struct/Nodes/logic/path/integer":{"id":"profiles/Struct/Nodes/logic/path/integer","title":"logic/path/integer","description":"If pathToSearch is \\"a.b\\" then it will return 1 if obj is }. It will return undefined, if such path is not found. See Rambdax\'s path\\"","sidebar":"docsSidebar"},"profiles/Struct/Nodes/logic/path/object":{"id":"profiles/Struct/Nodes/logic/path/object","title":"logic/path/object","description":"If pathToSearch is \\"a.b\\" then it will return 1 if obj is }. It will return undefined, if such path is not found. See Rambdax\'s path\\"","sidebar":"docsSidebar"},"profiles/Struct/Nodes/logic/path/string":{"id":"profiles/Struct/Nodes/logic/path/string","title":"logic/path/string","description":"If pathToSearch is \\"a.b\\" then it will return 1 if obj is }. It will return undefined, if such path is not found. See Rambdax\'s path\\"","sidebar":"docsSidebar"},"profiles/Struct/Nodes/logic/validate/object":{"id":"profiles/Struct/Nodes/logic/validate/object","title":"logic/validate/object","description":"Validate data using passed schema. See Ajv\'s validate","sidebar":"docsSidebar"},"profiles/Struct/Nodes/math/to-list/string":{"id":"profiles/Struct/Nodes/math/to-list/string","title":"math/toList/string","description":"Converts a string to a list","sidebar":"docsSidebar"},"profiles/Struct/Nodes/math/to-object/string":{"id":"profiles/Struct/Nodes/math/to-object/string","title":"math/toObject/string","description":"Converts a string to a object","sidebar":"docsSidebar"},"profiles/Struct/Nodes/math/to-string/list":{"id":"profiles/Struct/Nodes/math/to-string/list","title":"math/toString/list","description":"Converts a list to a string","sidebar":"docsSidebar"},"profiles/Struct/Nodes/math/to-string/object":{"id":"profiles/Struct/Nodes/math/to-string/object","title":"math/toString/object","description":"Converts a object to a string","sidebar":"docsSidebar"},"profiles/Struct/Values/list":{"id":"profiles/Struct/Values/list","title":"list","description":"Serialize","sidebar":"docsSidebar"},"profiles/Struct/Values/object":{"id":"profiles/Struct/Values/object","title":"object","description":"Serialize","sidebar":"docsSidebar"}}}')}}]);