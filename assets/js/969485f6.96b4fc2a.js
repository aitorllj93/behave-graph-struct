"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[84],{79769:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var o=t(87462),s=(t(67294),t(3905));const r={},a="Sequence",l={unversionedId:"examples/core/flow/Sequence",id:"examples/core/flow/Sequence",title:"Sequence",description:"",source:"@site/docs/examples/core/flow/Sequence.mdx",sourceDirName:"examples/core/flow",slug:"/examples/core/flow/Sequence",permalink:"/behave-graph-struct/docs/examples/core/flow/Sequence",draft:!1,editUrl:"https://github.com/aitorllj93/behave-graph-struct/tree/main/website/docs/examples/core/flow/Sequence.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Performance Test",permalink:"/behave-graph-struct/docs/examples/core/flow/PerformanceTest"},next:{title:"Wait All",permalink:"/behave-graph-struct/docs/examples/core/flow/WaitAll"}},c={},u=[],d={toc:u};function p(e){let{components:n,...t}=e;return(0,s.kt)("wrapper",(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"sequence"},"Sequence"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "nodes": [\n    {\n      "type": "lifecycle/onStart",\n      "id": "0",\n      "flows": {\n        "flow": {\n          "nodeId": "1",\n          "socket": "flow"\n        }\n      }\n    },\n    {\n      "type": "debug/log",\n      "id": "1",\n      "parameters": {\n        "text": {\n          "value": "Starting Sequence..."\n        }\n      },\n      "flows": {\n        "flow": {\n          "nodeId": "2",\n          "socket": "flow"\n        }\n      }\n    },\n    {\n      "type": "flow/sequence",\n      "configuration": {\n        "numOutputs": 3\n      },\n      "id": "2",\n      "flows": {\n        "1": {\n          "nodeId": "3",\n          "socket": "flow"\n        },\n        "2": {\n          "nodeId": "4",\n          "socket": "flow"\n        },\n        "3": {\n          "nodeId": "5",\n          "socket": "flow"\n        }\n      }\n    },\n    {\n      "type": "debug/log",\n      "id": "3",\n      "parameters": {\n        "text": {\n          "value": "First Sequence Output!"\n        }\n      },\n      "flows": {\n        "flow": {\n          "nodeId": "6",\n          "socket": "flow"\n        }\n      }\n    },\n    {\n      "type": "debug/log",\n      "id": "4",\n      "parameters": {\n        "text": {\n          "value": "Second Sequence Output!"\n        }\n      }\n    },\n    {\n      "type": "debug/log",\n      "id": "5",\n      "parameters": {\n        "text": {\n          "value": "Third Sequence Output!"\n        }\n      }\n    },\n    {\n      "type": "debug/log",\n      "id": "6",\n      "parameters": {\n        "text": {\n          "value": "Downstream of First Sequence!"\n        }\n      }\n    }\n  ]\n}\n\n')))}p.isMDXComponent=!0}}]);